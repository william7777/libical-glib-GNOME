<structure namespace="ICal" name="Value" native="icalvalue">
    <method name="i_cal_value_new" corresponds="icalvalue_new" kind="constructor" since="1.0">
        <parameter type="ICalValueKind" name="kind" comment="A #ICalValueKind"/>
        <returns type="ICalValue *" annotation="transfer full" comment="The newly created #ICalValue."/>
        <comment xml:space="preserve">Create a new #ICalValue with specific kind.</comment>
    </method>
    <method name="i_cal_value_new_clone" corresponds="icalvalue_new_clone" kind="clone" since="1.0">
        <parameter type="const ICalValue *" name="value" comment="The #ICalValue to be cloned."/>
        <returns type="ICalValue *" annotation="transfer full" comment="The newly created #ICalValue with the same property as @value."/>
        <comment xml:space="preserve">Deeply clone a #ICalValue.</comment>
    </method>
    <method name="i_cal_value_new_from_string" corresponds="icalvalue_new_from_string" kind="constructor" since="1.0">
        <parameter type="ICalValueKind" name="kind" comment="A #ICalValueKind"/>
        <parameter type="const gchar *" name="str" comment="A string."/>
        <returns type="ICalValue *" annotation="transfer full" comment="The newly created #ICalValue based on the @kind and @str."/>
        <comment xml:space="preserve">Create a new #ICalValue based on the #ICalValueKind and a string.</comment>
    </method>
    <method name="i_cal_value_free" corresponds="icalvalue_free" kind="destructor" since="1.0">
        <parameter type="ICalValue *" name="value" comment="The #ICalValue to be freed."/>
        <comment xml:space="preserve">Free a #ICalValue.</comment>
    </method>
    <method name="i_cal_value_is_valid" corresponds="icalvalue_is_valid" since="1.0">
        <parameter type="const ICalValue *" name="value" comment="The #ICalValue to be checked."/>
        <returns type="gint" comment="1 if valid, 0 if not."/>
        <comment xml:space="preserve">Check if #ICalValue is valid.</comment>
    </method>
    <method name="i_cal_value_as_ical_string_r" corresponds="icalvalue_as_ical_string_r" since="1.0">
        <parameter type="const ICalValue *" name="value" comment="A #ICalValue."/>
        <returns type="gchar *" annotation="transfer full" comment="The string representation."/>
        <comment xml:space="preserve">Convert the #ICalValue to a string.</comment>
    </method>
    <method name="i_cal_value_isa" corresponds="icalvalue_isa" since="1.0">
        <parameter type="const ICalValue *" name="value" comment="A #ICalValue."/>
        <returns type="ICalValueKind" comment="The kind of @value."/>
        <comment xml:space="preserve">Get the kind of #ICalValue.</comment>
    </method>
    <method name="i_cal_value_isa_value" corresponds="icalvalue_isa_value" since="1.0">
        <parameter type="ICalValue *" name="value" comment="A #ICalValue"/>
        <returns type="gint" comment="1 if yes, 0 if not."/>
        <comment xml:space="preserve">Check whether the native part of #ICalValue is an icalvalue</comment>
    </method>
    <method name="i_cal_value_compare" corresponds="icalvalue_compare" since="1.0">
        <parameter type="const ICalValue *" name="a" comment="A #ICalValue."/>
        <parameter type="const ICalValue *" name="b" comment="A #ICalValue."/>
        <returns type="ICalParameterXliccomparetype" comment="The compare result."/>
        <comment xml:space="preserve">Compare two #ICalValue.</comment>
    </method>
    <method name="i_cal_value_string_to_kind" corresponds="icalvalue_string_to_kind" since="1.0">
        <parameter type="const gchar *" name="str" comment="A string."/>
        <returns type="ICalValueKind" comment="A #ICalValueKind."/>
        <comment xml:space="preserve">Convert a string to #ICalValueKind.</comment>
    </method>
    <method name="i_cal_value_kind_to_string" corresponds="icalvalue_kind_to_string" since="1.0">
        <parameter type="const ICalValueKind" name="kind" comment="A #ICalValueKind."/>
        <returns type="const gchar *" comment="The string representation of #ICalValueKind."/>
        <comment xml:space="preserve">Convert the #ICalValueKind to a string.</comment>
    </method>
    <method name="i_cal_value_kind_is_valid" corresponds="icalvalue_kind_is_valid" since="1.0">
        <parameter type="const ICalValueKind" name="kind" comment="The #ICalValueKind to be checked."/>
        <returns type="gint" comment="1 if yes, 0 if not."/>
        <comment xml:space="preserve">Check whether the #ICalValueKind is valid.</comment>
    </method>
    <method name="i_cal_value_encode_ical_string" corresponds="icalvalue_encode_ical_string" since="1.0">
        <parameter type="const gchar *" name="szText" comment="A string."/>
        <parameter type="gchar *" name="szEncText" annotation="in-out" comment="The encoded string in ical format."/>
        <parameter type="gint" name="MaxBufferLen" comment="The size of @szEncText."/>
        <returns type="gint" comment="1 if successful, 0 if failed."/>
        <comment xml:space="preserve">Encode a character string in ical format, esacpe certain characters, etc.</comment>
    </method>
    <method name="i_cal_value_decode_ical_string" corresponds="icalvalue_decode_ical_string" since="1.0">
        <parameter type="const gchar *" name="szText" comment="A string."/>
        <parameter type="gchar *" name="szDecText" annotation="in-out" comment="The original character string before encoded."/>
        <parameter type="gint" name="MaxBufferLen" comment="The size of @szDecText."/>
        <returns type="gint" comment="1 if successful, 0 if failed."/>
        <comment xml:space="preserve">Extract the original character string encoded by the above function</comment>
    </method>
</structure>