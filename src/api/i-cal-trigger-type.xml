<structure namespace="ICal" name="TriggerType" native="struct icaltriggertype" is_bare="true" default_native="icaltriggertype_from_int (0)">
    <method name="i_cal_trigger_type_from_int" corresponds="icaltriggertype_from_int" kind="constructor" since="">
        <parameter type="const gint" name="reltime" comment="An integer."/>
        <returns type="ICalTriggerType *" annotation="transfer full" comment="The newly created #ICalTriggerType."/>
        <comment xml:space="preserve">Create a #ICalTrigertype from integer.</comment>
    </method>
    <method name="i_cal_trigger_type_from_string" corresponds="icaltriggertype_from_string" kind="constructor" since="">
        <parameter type="const gchar *" name="str" comment="A string."/>
        <returns type="ICalTriggerType *" annotation="transfer full" comment="The newly created #ICalTriggerType."/>
        <comment xml:space="preserve">Create a #ICalTrigertype from a string.</comment>
    </method>
    <method name="i_cal_trigger_type_is_null_trigger" corresponds="icaltriggertype_is_null_trigger" since="">
        <parameter type="ICalTriggerType *" name="tr" comment="A #ICalTriggerType."/>
        <returns type="gint" comment="1 if yes, 0 if not."/>
        <comment xml:space="preserve">Check if a #ICalTriggerType is a null trigger.</comment>
    </method>
    <method name="i_cal_trigger_type_is_bad_trigger" corresponds="icaltriggertype_is_bad_trigger" since="">
        <parameter type="ICalTriggerType *" name="tr" comment="A #ICalTriggerType."/>
        <returns type="gint" comment="1 if yes, 0 if not."/>
        <comment xml:space="preserve">Check if a #ICalTriggerType is a bad trigger.</comment>
    </method>
</structure>